Compte-rendu TP5

------------------------------------------------------------------
NOM  : BRUNO
Prenom : Lauranne
Numero carte d'etudiant : 3602844

NOM :
Prenom :
Numero carte d'etudiant :
------------------------------------------------------------------

Signaux + processus TME4

Constatation des commutations
=============================

Question 1
----------
Affichage :
./affiche.sh 5
2677 : 0
2677 : 1
2677 : 2
2677 : 3
2677 : 4


Question 2
----------
Donnez plusieurs affichages. Conclusions ?
[1] 2785
2785 : 0
2786 : 0
2786 : 1
2785 : 1
2786 : 2
2785 : 2
2786 : 3
2785 : 3
2786 : 4
2785 : 4
[1]+  Fini                    ./affiche.sh 5

./affiche.sh 5 & ./affiche.sh 5
[1] 2799
2799 : 0
2800 : 0
2799 : 1
2800 : 1
2799 : 2
2800 : 2
2799 : 3
2800 : 3
2799 : 4
2800 : 4
[1]+  Fini                    ./affiche.sh 5

Les processus alternent entre l'état prêt et élu. Dans le deuxième cas ci dessus par exemple, le premier processus élu qui va pouvoir écrire est le 2799. Puis lors de l'execution, après avoir été élu et avoir écrit, chaque processus passera dans le statut "prêt".
Dans le cas où on a intervertion de l'ordre des processus, on est dans le cas où : le processus qui vient de passer dans "prêt" est réélu OU le processus a le temps d'effectuer plusieurs actions avant de passer dans le statut "prêt".

Question 3
----------
Conclusions ?
./affiche2.sh 5 & ./affiche2.sh 5
[1] 2847
2848 :2847 :0
0
2848 :2847 :1
1
2847 :2
2848 :2
2847 :3
2848 :3
2847 :4
2848 :4
[1]+  Fini                    ./affiche2.sh 5

On ne peut pas prédire quand on a deux processus en parallèle lequel a ses instructions exécutées avant l'autre, car à un moment donné un seul est élu et l'autre prêt (et on ne connait pas précisément cette alternance).

Mise en evidence des incoherences provoquees par les commutations
=================================================================

Question 1
----------
Explications
le script ajoute une ligne dans chacun des fichiers avec le pid du processus. Premier si le fichier n'existe pas/suivant si il existe

Question 2
----------
Explications
$ ./lancement_ecriture.sh a b c
$ cat a ; echo ; cat b ; echo ; cat c
premier 3113

premier 3112
suivant 3113

premier 3113
________________________________________________________
$ ./lancement_ecriture.sh a b c
$ cat a ; echo ; cat b ; echo ; cat c
premier 3123

premier 3123

premier 3122
suivant 3123
________________________________________________________
$ ./lancement_ecriture.sh a b c
$ cat a ; echo ; cat b ; echo ; cat c
premier 3132

premier 3131
suivant 3132

premier 3131
suivant 3132

Dans certains cas, il semblerait que la commutation de processus ait eu lieu juste après la vérification de l'existence du fichier.
Dans ce cas, les deux processus estiment que le fichier n'existe pas et ouvrent le fichier avec un offset à 0.
On se retrouve donc avec des fichiers qui peuvent ne contenir qu'un "premier".

Question 3
----------
Inserez le code source de la nouvelle version du script ecriture.sh

#! /bin/bash
# ecriture.sh

if [ $# -lt 1 ]
then
  echo Il faut au moins un parametre
  exit 1
fi

echo processus $$
for elem in "$@"
do
  if [ ! -e "$elem" ] ; then
     sleep 1
     echo premier $$ > "$elem"
  else
     echo suivant $$ >> "$elem"
  fi
done
			  
Inserez les executions
$ ./lancement_ecriture.sh a b c
processus 3343
processus 3344
$ cat a ; echo ; cat b ; echo ; cat c
premier 3344

premier 3344

premier 3344

Question 4
----------
Inserez le code source de la nouvelle version du script ecriture.sh
#! /bin/bash
# ecriture.sh

if [ $# -lt 1 ]
then
  echo Il faut au moins un parametre
  exit 1
fi

echo $$ >> fic_PID
while read pid ; do
    case "$pid" in
         "$$") ;;
         *) kill -SIGSTOP $pid 2>/dev/null;;
    esac
done < fic_PID

for elem in "$@"
do
  if [ ! -e "$elem" ]
    then
         echo premier $$ > "$elem"
    else
         echo suivant $$ >> "$elem"
    fi
done

while read pid ; do
    case "$pid" in
         "$$") ;;
         *) kill -SIGCONT $pid 2>/dev/null;;
    esac
done < fic_PID



Inserez les executions

$ ./lancement_ecriture.sh a b c ; cat a ; echo ; cat b ; echo ; cat c
premier 3673
suivant 3674

premier 3673
suivant 3674

premier 3673
suivant 3674

$ ./lancement_ecriture.sh a b c ; cat a ; echo ; cat b ; echo ; cat c
premier 3682
suivant 3683

premier 3682
suivant 3683

premier 3682
suivant 3683


Question 5
----------
Defauts de la solution proposee
Le fichier contient les PID des processus qui se sont terminés => on envoie des signaux a des processus qui sont déjà morts => il faut ecraser le fichier avant chaque lancement
Deux processus peuvent lire dans le fichier de pid en meme temps et cela peut poser problème (SIGSTOP envoyés).
La solution serait de lock les ressources partagées par les processus avec une solution équivalente à des "verrous"
